#!groovy
/**
 * Jenkins pipeline to build Corda Opensource Pull Requests with JDK11.
 */

@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

/**
 * Common Gradle arguments for all Gradle executions
 */
String COMMON_GRADLE_PARAMS = [
        '--no-daemon',
        '--stacktrace',
        '--info',
        '-Pcompilation.warningsAsErrors=false',
        '-Ptests.failFast=true',
].join(' ')

/**
 * The name of subfolders to run tests previously on Another Agent and Same Agent
 */
String sameAgentFolder = 'sameAgent'
String anotherAgentFolder = 'anotherAgent'

pipeline {
    agent {
        dockerfile {
            label 'standard'
            additionalBuildArgs '--build-arg USER="${USER}"' // DON'T change quotation - USER variable is substituted by SHELL!!!!
            filename "${sameAgentFolder}/.ci/dev/compatibility/DockerfileJDK11"
        }
    }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
        checkoutToSubdirectory "${sameAgentFolder}"
    }

    stages {
        stage('Compile') {
            steps {
                dir(sameAgentFolder) {
                    sh script: [
                            './gradlew',
                            COMMON_GRADLE_PARAMS,
                            'clean',
                            'jar'
                    ].join(' ')
                }
            }
        }

        stage('Copy') {
            steps {
                sh "rm -rf ${anotherAgentFolder} && mkdir -p ${anotherAgentFolder} &&  cd ${sameAgentFolder} && cp -aR . ../${anotherAgentFolder}"
            }
        }

        stage('Sonatype Check') {
            steps {
                dir(sameAgentFolder) {
                    script {
                        sh "./gradlew --no-daemon properties | grep -E '^(version|group):' >version-properties"
                        /* every build related to Corda X.Y (GA, RC, HC, patch or snapshot) uses the same NexusIQ application */
                        def version = sh(returnStdout: true, script: "grep ^version: version-properties | sed -e 's/^version: \\([0-9]\\+\\(\\.[0-9]\\+\\)\\+\\).*\$/\\1/'").trim()
                        def groupId = sh(returnStdout: true, script: "grep ^group: version-properties | sed -e 's/^group: //'").trim()
                        def artifactId = 'corda'
                        nexusAppId = "${groupId}-${artifactId}-${version}-noshell"
                    }
                    nexusPolicyEvaluation(
                            failBuildOnNetworkError: false,
                            iqApplication: selectedApplication(nexusAppId), // application *has* to exist before a build starts!
                            iqScanPatterns: [[scanPattern: 'node/capsule/build/libs/corda*.jar']],
                            iqStage: "source"
                    )
                }
            }
        }

    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
